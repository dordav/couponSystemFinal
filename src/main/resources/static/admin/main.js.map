{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/components/admin-web/admin-web.component.css","webpack:///./src/app/components/admin-web/admin-web.component.html","webpack:///./src/app/components/admin-web/admin-web.component.ts","webpack:///./src/app/components/companies/companies.component.css","webpack:///./src/app/components/companies/companies.component.html","webpack:///./src/app/components/companies/companies.component.ts","webpack:///./src/app/components/companies/company.ts","webpack:///./src/app/components/companies/create-new-company/create-new-company.component.css","webpack:///./src/app/components/companies/create-new-company/create-new-company.component.html","webpack:///./src/app/components/companies/create-new-company/create-new-company.component.ts","webpack:///./src/app/components/companies/delete-company/delete-company.component.css","webpack:///./src/app/components/companies/delete-company/delete-company.component.html","webpack:///./src/app/components/companies/delete-company/delete-company.component.ts","webpack:///./src/app/components/companies/get-all-companies/get-all-companies.component.css","webpack:///./src/app/components/companies/get-all-companies/get-all-companies.component.html","webpack:///./src/app/components/companies/get-all-companies/get-all-companies.component.ts","webpack:///./src/app/components/companies/getcomapny/getcomapny.component.css","webpack:///./src/app/components/companies/getcomapny/getcomapny.component.html","webpack:///./src/app/components/companies/getcomapny/getcomapny.component.ts","webpack:///./src/app/components/companies/update-company/update-company.component.css","webpack:///./src/app/components/companies/update-company/update-company.component.html","webpack:///./src/app/components/companies/update-company/update-company.component.ts","webpack:///./src/app/components/customers/create-new-customer/create-new-customer.component.css","webpack:///./src/app/components/customers/create-new-customer/create-new-customer.component.html","webpack:///./src/app/components/customers/create-new-customer/create-new-customer.component.ts","webpack:///./src/app/components/customers/customer.ts","webpack:///./src/app/components/customers/customers.component.css","webpack:///./src/app/components/customers/customers.component.html","webpack:///./src/app/components/customers/customers.component.ts","webpack:///./src/app/components/customers/delete-customer/delete-customer.component.css","webpack:///./src/app/components/customers/delete-customer/delete-customer.component.html","webpack:///./src/app/components/customers/delete-customer/delete-customer.component.ts","webpack:///./src/app/components/customers/get-all-customers/get-all-customers.component.css","webpack:///./src/app/components/customers/get-all-customers/get-all-customers.component.html","webpack:///./src/app/components/customers/get-all-customers/get-all-customers.component.ts","webpack:///./src/app/components/customers/get-customer/get-customer.component.css","webpack:///./src/app/components/customers/get-customer/get-customer.component.html","webpack:///./src/app/components/customers/get-customer/get-customer.component.ts","webpack:///./src/app/components/customers/update-customer/update-customer.component.css","webpack:///./src/app/components/customers/update-customer/update-customer.component.html","webpack:///./src/app/components/customers/update-customer/update-customer.component.ts","webpack:///./src/app/components/nav-bar/nav-bar.component.css","webpack:///./src/app/components/nav-bar/nav-bar.component.html","webpack:///./src/app/components/nav-bar/nav-bar.component.ts","webpack:///./src/app/services/companyServices/company-services.service.ts","webpack:///./src/app/services/customerServices/customer-services.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import {NgModule} from '@angular/core'\r\nimport {Routes, RouterModule} from '@angular/router'\r\nimport { AdminWebComponent } from './components/admin-web/admin-web.component';\r\nimport { CompaniesComponent } from './components/companies/companies.component';\r\nimport { CustomersComponent } from './components/customers/customers.component';\r\nimport { GetAllCompaniesComponent } from './components/companies/get-all-companies/get-all-companies.component';\r\nimport { CreateNewCompanyComponent } from './components/companies/create-new-company/create-new-company.component';\r\nimport { GetcomapnyComponent } from './components/companies/getcomapny/getcomapny.component';\r\nimport { UpdateCompanyComponent } from './components/companies/update-company/update-company.component'\r\nimport { DeleteCompanyComponent } from './components/companies/delete-company/delete-company.component'\r\nimport { GetAllCustomersComponent } from './components/customers/get-all-customers/get-all-customers.component'\r\nimport { GetCustomerComponent } from './components/customers/get-customer/get-customer.component'\r\nimport { CreateNewCustomerComponent } from './components/customers/create-new-customer/create-new-customer.component'\r\nimport { UpdateCustomerComponent } from './components/customers/update-customer/update-customer.component'\r\nimport { DeleteCustomerComponent } from './components/customers/delete-customer/delete-customer.component'\r\nimport { Component } from '@angular/core/src/metadata/directives';\r\n\r\nconst routes: Routes = [\r\n    { path: '', redirectTo: 'mainpage', pathMatch: 'full'},\r\n    { path: '#', redirectTo: 'mainpage', pathMatch: 'full'},\r\n    { path: 'mainpage', component: AdminWebComponent},\r\n    { path: 'company', component: CompaniesComponent},\r\n    { path: 'customer', component: CustomersComponent}, \r\n    {path : 'getallcompanies/updatecompany/:id' , component: UpdateCompanyComponent},\r\n    { path: 'getallcompanies', component: GetAllCompaniesComponent},\r\n    { path: 'appcreatenewcompany', component: CreateNewCompanyComponent},\r\n    { path: 'getcompany', component: GetcomapnyComponent},\r\n    { path: 'updatecompany' , component: UpdateCompanyComponent },\r\n    { path: 'deletecompany' , component: DeleteCompanyComponent},\r\n    { path: 'getcustomer' , component: GetCustomerComponent} , \r\n    { path: 'getallcustomers' , component: GetAllCustomersComponent},\r\n    { path: 'createnewcustomer' , component: CreateNewCustomerComponent},\r\n    { path: 'updatecustomer'  , component: UpdateCustomerComponent},\r\n    { path: 'deletecustomer' , component: DeleteCustomerComponent},\r\n    { path: '**', redirectTo: 'mainpage', pathMatch: 'full'}\r\n];\r\n\r\n@NgModule({\r\n    imports: [ RouterModule.forRoot(routes, {useHash: true})],\r\n    exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule {}","module.exports = \"\"","module.exports = \"\\n<app-nav-bar></app-nav-bar>\\n\\n\\n<router-outlet></router-outlet>>\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n\n\n\n}\n","import { BrowserModule } from '@angular/platform-browser';\n// import { HashLocationStrategy, LocationStrategy } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { AppRoutingModule } from './app-routing.module';\nimport { FormsModule } from '@angular/forms';\nimport { AppComponent } from './app.component';\nimport { AdminWebComponent } from './components/admin-web/admin-web.component';\nimport { NavBarComponent } from './components/nav-bar/nav-bar.component';\nimport { CompaniesComponent } from './components/companies/companies.component';\nimport { CustomersComponent } from './components/customers/customers.component';\nimport { GetAllCompaniesComponent } from './components/companies/get-all-companies/get-all-companies.component';\nimport { CreateNewCompanyComponent } from './components/companies/create-new-company/create-new-company.component';\nimport { UpdateCompanyComponent } from './components/companies/update-company/update-company.component';\nimport { HttpModule } from '@angular/http';\nimport { GetcomapnyComponent } from './components/companies/getcomapny/getcomapny.component';\nimport { CompanyServicesService } from './services/companyServices/company-services.service';\nimport { DeleteCompanyComponent } from './components/companies/delete-company/delete-company.component';\nimport { GetAllCustomersComponent } from './components/customers/get-all-customers/get-all-customers.component';\nimport { CreateNewCustomerComponent } from './components/customers/create-new-customer/create-new-customer.component';\nimport { GetCustomerComponent } from './components/customers/get-customer/get-customer.component';\nimport { UpdateCustomerComponent } from './components/customers/update-customer/update-customer.component';\nimport { DeleteCustomerComponent } from './components/customers/delete-customer/delete-customer.component';\nimport { CustomerServicesService } from './services/customerServices/customer-services.service';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    AdminWebComponent,\n    NavBarComponent,\n    CompaniesComponent,\n    CustomersComponent,\n    GetAllCompaniesComponent,\n    CreateNewCompanyComponent,\n    UpdateCompanyComponent,\n    GetcomapnyComponent,\n    DeleteCompanyComponent,\n    GetAllCustomersComponent,\n    CreateNewCustomerComponent,\n    GetCustomerComponent,\n    UpdateCustomerComponent,\n    DeleteCustomerComponent,\n  ],\n\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    FormsModule,\n    HttpModule,\n    \n  ],\n  providers: [\n    // {provide: LocationStrategy, useClass:HashLocationStrategy},\n    CompanyServicesService,CustomerServicesService,\n    ],\n  bootstrap: [AppComponent]\n\n})\nexport class AppModule { }\n","module.exports = \"\"","module.exports = \"\\n<!-- <div *ngIf = \\\"cart.length>0\\\">\\n    <h2>My cart: <br></h2>\\n  <div *ngFor=\\\"let product of cart\\\">\\n    <p>name: {{product}}</p>\\n  </div>\\n</div> -->\\n<!-- <h1>Shop</h1>\\n<div *ngFor = \\\"let prd of products\\\">\\n    <p>product name: {{prd.name}} </p>\\n    <p>product price: {{prd.price}} </p>\\n    <p>product amount: {{prd[\\\"amount\\\"]}}</p>\\n    <button (click)='buy(prd)'>buy</button>\\n    <hr>\\n</div> -->\\n<!-- <div class=\\\"card\\\" style=\\\"width: 18rem;\\\">\\n    <div class=\\\"card-header\\\">\\n      Company\\n    </div>\\n    <ul class=\\\"list-group list-group-flush\\\">\\n      <div *ngFor = \\\"let prd of products\\\">\\n          <li class=\\\"list-group-item\\\">Company name: {{prd.name}}, Company id:{{prd.id}}</li>\\n          <li></li>\\n      </div>\\n\\n    </ul>\\n  </div> -->\\n  <div class=\\\"jumbotron\\\">\\n      <h1 class=\\\"display-4\\\">Hello, Admin!</h1>\\n      <p class=\\\"lead\\\">This is the main page, here you can choose between company or customer, to get/create/update and delete.</p>\\n      <hr class=\\\"my-4\\\">\\n      <p>You have all the permissions, let's get started with:</p>\\n      <a class=\\\"btn btn-primary btn-lg\\\" routerLink=\\\"/company\\\" role=\\\"\\\">Company</a><br>\\n      <br>\\n      <a class=\\\"btn btn-primary btn-lg\\\" routerLink=\\\"/customer\\\" role=\\\"button\\\">Customer</a>\\n    </div>\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-admin-web',\n  templateUrl: './admin-web.component.html',\n  styleUrls: ['./admin-web.component.css']\n})\nexport class AdminWebComponent implements OnInit {\n\n  constructor() { }\n\n\n  ngOnInit() {\n    \n  }\n\n}\n","module.exports = \"\"","module.exports = \"<div class=\\\"container-fluid\\\">\\n<div class=\\\"Get company\\\">\\n    <h5 class=\\\"card-header\\\">Get all company's details</h5>\\n    <div class=\\\"card-body\\\">     \\n      <a routerLink='/getallcompanies' class=\\\"btn btn-primary\\\">Get all companies</a>\\n    </div>\\n  </div>\\n\\n  <div class=\\\"Create new company\\\">\\n      <h5 class=\\\"card-header\\\">Create new company</h5>\\n      <div class=\\\"card-body\\\">        \\n        <a routerLink='/appcreatenewcompany' class=\\\"btn btn-primary\\\">Create company</a>\\n      </div>\\n    </div>\\n\\n    <div class=\\\"Update a company's details\\\">\\n        <h5 class=\\\"card-header\\\">Update a company's details</h5>\\n        <div class=\\\"card-body\\\">        \\n          <a routerLink=\\\"/updatecompany\\\" class=\\\"btn btn-primary\\\">Update company</a>\\n        </div>\\n      </div>\\n      <div class=\\\"Get company by id\\\">\\n          <h5 class=\\\"card-header\\\">Get company</h5>\\n          <div class=\\\"card-body\\\">        \\n            <a routerLink='/getcompany' class=\\\"btn btn-primary\\\">Get company</a>\\n          </div>\\n        </div>\\n        <div class=\\\"Delete company and company's coupon\\\">\\n            <h5 class=\\\"card-header\\\">Delete company and company's coupon</h5>\\n            <div class=\\\"card-body\\\">        \\n              <a routerLink='/deletecompany' class=\\\"btn btn-primary\\\">Delete company</a>\\n            </div>\\n          </div>\\n        </div>\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-companies',\n  templateUrl: './companies.component.html',\n  styleUrls: ['./companies.component.css']\n})\nexport class CompaniesComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","export class company{\r\n\r\n\r\n\r\n    constructor (public  id? : number,\r\n                 public name? : string,\r\n                 public password? : string,\r\n                 public email ?: string)\r\n                                 {\r\n     }\r\n}","module.exports = \"\"","module.exports = \"<div class=\\\"container-fluid\\\">\\n    <h1> <span class=\\\"badge badge-secondary\\\">Create a new company</span></h1>\\n    <br>\\n    <br>\\n    <br>\\n    <h4> <span class=\\\"badge badge-secondary\\\">Please fill in the blanks rows</span></h4>\\n<br>\\n  <form>\\n  \\n    <div class=\\\"form-group col-md-6\\\">\\n      <label for=\\\"inputName\\\">name</label>\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"inputName\\\" [(ngModel)]=\\\"company.name\\\" name=\\\"nametxt\\\">\\n    </div>\\n    \\n    <div class=\\\"form-group col-md-6\\\">\\n      <label for=\\\"inputPassword4\\\">Password</label>\\n      <input type=\\\"password\\\" class=\\\"form-control\\\" id=\\\"inputPassword4\\\" [(ngModel)]=\\\"company.password\\\" name=\\\"passtxt\\\">\\n    </div>\\n              <div class=\\\"form-group col-md-6\\\">\\n                <label for=\\\"inputEmail4\\\">Email</label>\\n                <input type=\\\"email\\\" class=\\\"form-control\\\" id=\\\"inputEmail4\\\" [(ngModel)]=\\\"company.email\\\" name=\\\"emailtxt\\\">\\n              </div>\\n              <br>\\n              <br>\\n              <br>\\n    <button (click)=\\\"newComp()\\\" class=\\\"btn btn-primary\\\">Create</button>\\n  </form>\\n</div>\"","import { Component, OnInit, ErrorHandler } from '@angular/core';\nimport { company } from '../company';\nimport { CompanyServicesService } from '../../../services/companyServices/company-services.service'\n\n@Component({\n  selector: 'app-create-new-company',\n  templateUrl: './create-new-company.component.html',\n  styleUrls: ['./create-new-company.component.css']\n})\nexport class CreateNewCompanyComponent implements OnInit {\n  \n\n  constructor(private _companyservice : CompanyServicesService) { }\n\n  company : company = new company(0,\"\",\"\",\"\");\n /**\n * @ngdoc method\n * @name newComp()\n * @param company:company\n * @description\n * This method act as transfer station, it gets a company\n *  and apply other method on the service , named \"createcompany\" \n **/\n  newComp(){\n    this._companyservice.createcompany(this.company)\n  }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"\"","module.exports = \"<div class=\\\"container-fluid\\\">\\n    <h1> <span class=\\\"badge badge-secondary\\\">Get company's details by ID, and than Delete it.</span></h1>\\n    <br>\\n    <br>\\n    <br>\\n    <h4> <span class=\\\"badge badge-secondary\\\">Please fill in the blank row</span></h4>\\n    <br>\\n    <form>\\n      <div class=\\\"form-group col-md-6\\\" >\\n        <label for=\\\"inputName\\\"><h5>id:</h5></label>\\n        <input type=\\\"number\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"companyid\\\" name=\\\"idnum\\\" [(ngModel)]=\\\"company2.id\\\" id=\\\"idn\\\">\\n      </div>\\n      <div >\\n          <!-- *ngIf=\\\"show\\\" -->\\n          <form >\\n              <fieldset *ngIf=\\\"show\\\" disabled>\\n\\n                  <div class=\\\"form-group col-md-6\\\" >\\n                    <label for=\\\"disabledTextInput\\\">name:</label>\\n                    <input type=\\\"text\\\" id=\\\"disabledTextInput\\\" class=\\\"form-control\\\" placeholder=\\\"{{_companySer.company.name}}\\\">\\n                  </div>\\n                  <div class=\\\"form-group col-md-6\\\" >\\n                      <label for=\\\"disabledTextInput\\\">password:</label>\\n                      <input type=\\\"text\\\" id=\\\"disabledTextInput\\\" class=\\\"form-control\\\" placeholder=\\\"{{_companySer.company.password}}\\\">\\n                    </div>\\n                    <div class=\\\"form-group col-md-6\\\" >\\n                        <label for=\\\"disabledTextInput\\\">email:</label>\\n                        <input type=\\\"text\\\" id=\\\"disabledTextInput\\\" class=\\\"form-control\\\" placeholder=\\\"{{_companySer.company.email}}\\\">\\n                      </div>\\n    \\n                </fieldset>\\n            </form>\\n          </div>\\n      <br>\\n      <br>\\n      <button (click)=\\\"getserv(companyid); show=true;\\\" class=\\\"btn btn-primary\\\">Get!</button>&nbsp;&nbsp;&nbsp;&nbsp;\\n      <button (click)=\\\"_companySer.swalDel(companyid);\\\" class=\\\"btn btn-primary\\\">Delete!</button>\\n    </form>\\n        <div>\\n        \\n        </div>\\n  </div>\"","import { Component, OnInit } from '@angular/core';\nimport { CompanyServicesService } from '../../../services/companyServices/company-services.service'\nimport { company } from '../company';\n\n\n@Component({\n  selector: 'app-delete-company',\n  templateUrl: './delete-company.component.html',\n  styleUrls: ['./delete-company.component.css']\n})\nexport class DeleteCompanyComponent implements OnInit {\n  company : company = new company(0,\"\",\"\",\"\");\n  company2 : company = new company(0,\"\",\"\",\"\");\n  \n\n  constructor(private _companySer :CompanyServicesService) { }\n\n  ngOnInit() {\n  }\n   /**\n * @ngdoc method\n * @name getserv()\n * @param id:number\n * @description\n * This method act as transfer station, it gets an ID\n *  and apply other method on the service , named \"getcompany\" \n **/\n\n  getserv(id: number){\n    this._companySer.getCompany(id);\n  }\n\n}\n","module.exports = \"\"","module.exports = \"\\n<div class=\\\"container\\\" >\\n    <br><br>\\n            <div class=\\\"row\\\" >\\n              <div class=\\\"col-md-4\\\" *ngFor='let comp of companies ; let i = index'>\\n                  <div class=\\\"card\\\" style=\\\"width: 18rem;\\\">\\n                      <div class=\\\"card-header\\\">\\n                          Company\\n                        </div>\\n                      <div class=\\\"card-body\\\">\\n                        <h5 class=\\\"card-title\\\">Name: {{comp.name}}</h5>\\n                      </div>\\n                      <ul class=\\\"list-group list-group-flush\\\">\\n                        <li class=\\\"list-group-item\\\" >Id: {{comp.id}}</li>\\n                        <li class=\\\"list-group-item\\\">Name: {{comp.name}}</li>\\n                        <li class=\\\"list-group-item\\\">Email: {{comp.email}}</li>\\n                      </ul>\\n                      <div class=\\\"card-body\\\">\\n                        <button (click)=\\\"gettoupdate(i)\\\" type=\\\"button\\\" class=\\\"btn btn-link\\\">Update company</button>\\n                          \\n                      </div>\\n                    </div><br><br><br>\\n              </div>\\n\\n            </div>\\n          </div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { Http } from '@angular/http';\nimport { company } from '../company';\nimport Swal from 'sweetalert2';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { CompanyServicesService } from '../../../services/companyServices/company-services.service'\n\n\n@Component({\n  selector: 'app-get-all-companies',\n  templateUrl: './get-all-companies.component.html',\n  styleUrls: ['./get-all-companies.component.css'],\n\n})\nexport class GetAllCompaniesComponent implements OnInit {\npublic loginURL:\"http://localhost:8080/login.html\"\n  /**\n   * @ngdoc method\n   * @name swalwarning()\n   * @param err: any \n   * @description\n   * This is method gets a err: any\n   *  and display a specific alert accordingly\n   **/\n  swalwarning(err: any) {\n    Swal({\n      type: 'error',\n      title: 'Oops...',\n      text: err + '!',\n      footer: '<a href>Why do I have this issue?</a>'\n    })\n  }\n  constructor(private _http: Http,\n    private _route: ActivatedRoute,\n    private _router: Router,\n    private _compserv: CompanyServicesService) {\n\n\n    /**\n     * @function http:Http.\n     * @description\n     * This function fire an \"ajax\" (\"get\"-method) over Http protocol.\n     * Then by async (Observable) method named \"subscribe\" catch  the response \n     * and put it into local array.\n     **/\n    this._http.get(\"http://localhost:8080/admin/getallcompanies\").\n      subscribe(\n        (resp) => {\n          this.companies = this.sortbyId(resp.json());\n          this.companies2 = this.companies;\n          console.log(resp)\n        }, (err) => {\n          \n          console.log(err);\n          if (err.status == 403) {\n            window.location.href = this.loginURL;\n          } else {\n          this.swalwarning(err._body)\n          }\n        }\n      )\n  }\n  companies: company[];\n  companies2: company[] = [];\n\n\n  /**\n * @ngdoc method\n * @name sortbyId\n * @param company:company[] (Array)\n * @return The same array with sorted values\n */\n  sortbyId(companies2: company[]) {\n    return this.companies2 = companies2.sort((a, b) => {\n      var x = a.id;\n      var y = b.id;\n      if (x < y) { return -1; }\n      if (x > y) { return 1; }\n      return 0\n    })\n  }\n\n  /**\n* @ngdoc method\n* @name gettoupdate()\n* @param i:number (index)\n* @description\n* This method gets param i:index and put it in local member.\n* navigate to other component and pass the local member value.\n**/\n  gettoupdate(i: number) {\n\n    let x: company = this.companies2[i];\n    this._router.navigate([\"updatecompany\", x.id], { relativeTo: this._route });\n    this._compserv.companyToUpdate.id = x.id;\n\n  }\n\n  ngOnInit() {\n  }\n}","module.exports = \"\"","module.exports = \"<div class=\\\"container-fluid\\\">\\n  <h1> <span class=\\\"badge badge-secondary\\\">Get company's details by ID</span></h1>\\n  <br>\\n  <br>\\n  <br>\\n  <h4> <span class=\\\"badge badge-secondary\\\">Please fill in the blank row</span></h4>\\n  <br>\\n  <form>\\n    <div class=\\\"form-group col-md-6\\\" >\\n      <label for=\\\"inputName\\\"><h5>id:</h5></label>\\n      <input type=\\\"number\\\" class=\\\"form-control\\\" placeholder=\\\"0\\\" [(ngModel)]=\\\"companyid\\\" name=\\\"idnum\\\" required>\\n    </div>\\n\\n    <div *ngIf=\\\"show\\\">\\n\\n        <form>\\n            <fieldset *ngIf=\\\"show\\\" disabled>\\n              <div class=\\\"form-group col-md-6\\\" >\\n                <label for=\\\"disabledTextInput\\\">name:</label>\\n                <input type=\\\"text\\\" id=\\\"disabledTextInput\\\" class=\\\"form-control\\\" placeholder=\\\"{{_companySer.company.name}}\\\">\\n              </div>\\n              <div class=\\\"form-group col-md-6\\\" >\\n                  <label for=\\\"disabledTextInput\\\">password:</label>\\n                  <input type=\\\"text\\\" id=\\\"disabledTextInput\\\" class=\\\"form-control\\\" placeholder=\\\"{{_companySer.company.password}}\\\">\\n                </div>\\n                <div class=\\\"form-group col-md-6\\\" >\\n                    <label for=\\\"disabledTextInput\\\">email:</label>\\n                    <input type=\\\"text\\\" id=\\\"disabledTextInput\\\" class=\\\"form-control\\\" placeholder=\\\"{{_companySer.company.email}}\\\">\\n                  </div>\\n\\n            </fieldset>\\n          </form>\\n        </div>\\n    <br>\\n    <br>\\n    <button (click)=\\\"_companySer.getCompany(companyid); show=true\\\" class=\\\"btn btn-primary\\\">Get!</button>\\n  </form>\\n      <div>\\n      \\n      </div>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { Http } from '@angular/http';\nimport { company } from '../company';\nimport { CompanyServicesService } from '../../../services/companyServices/company-services.service'\n\n\n@Component({\n  selector: 'app-getcomapny',\n  templateUrl: './getcomapny.component.html',\n  styleUrls: ['./getcomapny.component.css']\n})\nexport class GetcomapnyComponent implements OnInit {\n  // show = false;\n   company : company = new company(0,\"\",\"\",\"\");\n   company2 : company = new company(0,\"\",\"\",\"\");\n  constructor(private _companySer : CompanyServicesService ) {}\n  \n   /**\n * @ngdoc method\n * @name getserv()\n * @param id:number\n * @description\n * This is method act as transfer station, it gets an ID\n *  and apply other method on the service , named \"getcompany\" \n **/\n    getserv(id: number){\n      this._companySer.getCompany(id);\n    }\n  \n\n  ngOnInit() {  }\n}\n\n\n","module.exports = \"\"","module.exports = \"<div class=\\\"container-fluid\\\">\\n    <h1> <span class=\\\"badge badge-secondary\\\">Get company's details by ID, and than Update it.</span></h1>\\n    <br>\\n    <br>\\n    <br>\\n    <h4> <span class=\\\"badge badge-secondary\\\">Please fill in the blank row</span></h4>\\n    <br>\\n    <form>\\n      <div class=\\\"form-group col-md-6\\\" >\\n        <label for=\\\"inputName\\\"><h5>id:</h5></label>\\n        <input type=\\\"number\\\" class=\\\"form-control\\\" value=\\\"{{company.id}}\\\" [(ngModel)]=\\\"company.id\\\" name=\\\"idnum\\\" [(ngModel)]=\\\"_companySer.companyToUpdate.id\\\" id=\\\"idn\\\">\\n      </div>\\n      <div >\\n          <!-- *ngIf=\\\"show\\\" -->\\n          <form *ngIf=\\\"show\\\">\\n\\n              <fieldset >\\n                <div class=\\\"form-group col-md-6\\\" >\\n                  <label for=\\\"inputName\\\">name:</label>\\n                  <input type=\\\"text\\\" class=\\\"form-control\\\" value=\\\"{{_companySer.company.name}}\\\" name=\\\"nametxt\\\" [(ngModel)]=\\\"_companySer.companyToUpdate.name\\\" disabled>\\n                </div>\\n                <div class=\\\"form-group col-md-6\\\" >\\n                    <label for=\\\"inputName\\\">password:</label>\\n                    <input type=\\\"text\\\" class=\\\"form-control\\\" value=\\\"{{_companySer.company.password}}\\\" name=\\\"passtxt\\\" [(ngModel)]=\\\"_companySer.companyToUpdate.password\\\">\\n                  </div>\\n                  <div class=\\\"form-group col-md-6\\\" >\\n                      <label for=\\\"inputName\\\">email:</label>\\n                      <input type=\\\"text\\\" class=\\\"form-control\\\" value=\\\"{{_companySer.company.email}}\\\" name=\\\"emailtxt\\\" [(ngModel)]=\\\"_companySer.companyToUpdate.email\\\">\\n                    </div>\\n  \\n              </fieldset>\\n            </form>\\n          </div>\\n      <br>\\n      <br>\\n      <button (click)=\\\"getserv(); show=true;\\\" class=\\\"btn btn-primary\\\">Get!</button>&nbsp;&nbsp;&nbsp;&nbsp;\\n      <button *ngIf=\\\"show\\\" (click)=\\\"_companySer.updatecompany();\\\" class=\\\"btn btn-primary\\\">Update!</button>\\n    </form>\\n        <div>\\n        \\n        </div>\\n  </div>\"","import { Component, OnInit } from '@angular/core';\nimport { company } from '../company';\nimport { CompanyServicesService } from '../../../services/companyServices/company-services.service'\nimport { ActivatedRoute } from '@angular/router'\n\n\n\n@Component({\n  selector: 'app-update-company',\n  templateUrl: './update-company.component.html',\n  styleUrls: ['./update-company.component.css']\n})\nexport class UpdateCompanyComponent implements OnInit {\n  // show = false;\n    company : company = new company(0,\"\",\"\",\"\");\n  constructor(private _companySer :CompanyServicesService,private _activatedroute : ActivatedRoute)  { }\n\n  id:number=0;\n  show: boolean = false;\n\n  \n/**\n * @ngdoc method\n * @name getserv()\n * @param id:number\n * @description\n * This is method act as transfer station, it gets an ID\n *  and apply other method on the service , named \"getcompany\" \n **/\n  getserv(){\n    this._companySer.getCompany(this.company.id);\n\n  }\n\n\n\n  ngOnInit() {\n    this.id=this._activatedroute.snapshot.params['id'];\n    console.log(this.id)\n    if (this.id>0&&this.id!=null) {\n      this._companySer.getCompany(this.id)\n      this.company.id=this.id\n      this.show=true;\n      this.id=0;\n    }\n  }\n\n\n\n}\n","module.exports = \"\"","module.exports = \"<div class=\\\"container-fluid\\\">\\n    <h1> <span class=\\\"badge badge-secondary\\\">Create a new customer</span></h1>\\n    <br>\\n    <br>\\n    <br>\\n    <h4> <span class=\\\"badge badge-secondary\\\">Please fill in the blanks rows</span></h4>\\n<br>\\n  <form>\\n  \\n    <div class=\\\"form-group col-md-6\\\">\\n      <label for=\\\"inputName\\\">name</label>\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"inputName\\\" [(ngModel)]=\\\"customer.name\\\" name=\\\"nametxt\\\">\\n    </div>\\n    \\n    <div class=\\\"form-group col-md-6\\\">\\n      <label for=\\\"inputPassword4\\\">Password</label>\\n      <input type=\\\"password\\\" class=\\\"form-control\\\" id=\\\"inputPassword4\\\" [(ngModel)]=\\\"customer.password\\\" name=\\\"passtxt\\\">\\n    </div>\\n\\n              <br>\\n              <br>\\n              <br>\\n    <button (click)=\\\"newcust()\\\" class=\\\"btn btn-primary\\\">Create</button>\\n  </form>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { CustomerServicesService } from '../../../services/customerServices/customer-services.service'\nimport { customer} from '../customer'\n\n\n@Component({\n  selector: 'app-create-new-customer',\n  templateUrl: './create-new-customer.component.html',\n  styleUrls: ['./create-new-customer.component.css']\n})\nexport class CreateNewCustomerComponent implements OnInit {\n\n  customer : customer = new customer(0,\"\",\"\");  \n  constructor(private _custsrv : CustomerServicesService) { }\n  \n\n   /**\n * @ngdoc method\n * @name newcust()\n * @param customer:customer\n * @description\n * This is method act as transfer station, it gets a customer\n *  and apply other method on the service , named \"createcustomer\" \n **/\n  newcust(){\n    this._custsrv.createcustomer(this.customer );\n\n  }\n\n\n  ngOnInit() {\n  }\n\n}\n","export class customer{\r\n    \r\n    \r\n    \r\n        constructor (public  id? : number,\r\n                     public name? : string,\r\n                     public password? : string,\r\n                     )\r\n                                     {\r\n         }\r\n    }","module.exports = \"\"","module.exports = \"<div class=\\\"container-fluid\\\">\\n    <div class=\\\"Get all customers\\\">\\n        <h5 class=\\\"card-header\\\">Get details of all customers</h5>\\n        <div class=\\\"card-body\\\">     \\n          <a routerLink='/getallcustomers' class=\\\"btn btn-primary\\\">Get all customers</a>\\n        </div>\\n      </div>\\n    \\n      <div class=\\\"Create new customer\\\">\\n          <h5 class=\\\"card-header\\\">Create new customer</h5>\\n          <div class=\\\"card-body\\\">        \\n            <a routerLink='/createnewcustomer' class=\\\"btn btn-primary\\\">Create customer</a>\\n          </div>\\n        </div>\\n    \\n        <div class=\\\"Update a customer's details\\\">\\n            <h5 class=\\\"card-header\\\">Update a customer's details</h5>\\n            <div class=\\\"card-body\\\">        \\n              <a routerLink=\\\"/updatecustomer\\\" class=\\\"btn btn-primary\\\">Update customer</a>\\n            </div>\\n          </div>\\n          <div class=\\\"Get customer by id\\\">\\n              <h5 class=\\\"card-header\\\">Get a customer's details</h5>\\n              <div class=\\\"card-body\\\">        \\n                <a routerLink='/getcustomer' class=\\\"btn btn-primary\\\">Get customer</a>\\n              </div>\\n            </div>\\n            <div class=\\\"Delete customer and his coupons\\\">\\n                <h5 class=\\\"card-header\\\">Delete a customer and his coupons</h5>\\n                <div class=\\\"card-body\\\">        \\n                  <a routerLink='/deletecustomer' class=\\\"btn btn-primary\\\">Delete customer</a>\\n                </div>\\n              </div>\\n            </div>\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-customers',\n  templateUrl: './customers.component.html',\n  styleUrls: ['./customers.component.css']\n})\nexport class CustomersComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"\"","module.exports = \"<div class=\\\"container-fluid\\\">\\n    <h1> <span class=\\\"badge badge-secondary\\\">Get customer's details by ID, and than Delete it.</span></h1>\\n    <br>\\n    <br>\\n    <br>\\n    <h4> <span class=\\\"badge badge-secondary\\\">Please fill in the blank row</span></h4>\\n    <br>\\n    <form>\\n      <div class=\\\"form-group col-md-6\\\" >\\n        <label for=\\\"inputName\\\"><h5>id:</h5></label>\\n        <input type=\\\"number\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"customerid\\\" name=\\\"idnum\\\" [(ngModel)]=\\\"customer2.id\\\" id=\\\"idn\\\">\\n      </div>\\n      <div >\\n          <!-- *ngIf=\\\"show\\\" -->\\n          <form >\\n              <fieldset *ngIf=\\\"show\\\" disabled>\\n                  <div class=\\\"form-group col-md-6\\\" >\\n                    <label for=\\\"disabledTextInput\\\">name:</label>\\n                    <input type=\\\"text\\\" id=\\\"disabledTextInput\\\" class=\\\"form-control\\\" placeholder=\\\"{{_custsrv.customer.name}}\\\">\\n                  </div>\\n                  <div class=\\\"form-group col-md-6\\\" >\\n                      <label for=\\\"disabledTextInput\\\">password:</label>\\n                      <input type=\\\"text\\\" id=\\\"disabledTextInput\\\" class=\\\"form-control\\\" placeholder=\\\"{{_custsrv.customer.password}}\\\">\\n                    </div>\\n \\n    \\n                </fieldset>\\n            </form>\\n          </div>\\n      <br>\\n      <br>\\n      <button (click)=\\\"_custsrv.getcustomer(customerid); show=true;\\\" class=\\\"btn btn-primary\\\">Get!</button>&nbsp;&nbsp;&nbsp;&nbsp;\\n      <button (click)=\\\"_custsrv.swalDel(customerid);\\\" class=\\\"btn btn-primary\\\">Delete!</button>\\n    </form>\\n        <div>\\n        \\n        </div>\\n  </div>\"","import { Component, OnInit } from '@angular/core';\nimport { customer} from '../customer'\nimport { CustomerServicesService } from '../../../services/customerServices/customer-services.service'\n\n\n@Component({\n  selector: 'app-delete-customer',\n  templateUrl: './delete-customer.component.html',\n  styleUrls: ['./delete-customer.component.css']\n})\nexport class DeleteCustomerComponent implements OnInit {\n\n  customer : customer = new customer(0,\"\",\"\");  \n  customer2 : customer = new customer(0,\"\",\"\");  \n  \n  constructor(private _custsrv : CustomerServicesService) { }\n  \n  ngOnInit() {\n  }\n\n}\n","module.exports = \"\"","module.exports = \"      \\n   \\n    <div class=\\\"container\\\" >\\n      <br><br>\\n              <div class=\\\"row\\\" >\\n                <div class=\\\"col-md-4\\\"  *ngFor='let cust of customers '>\\n                    <div class=\\\"card\\\" style=\\\"width: 18rem;\\\">\\n                        <div class=\\\"card-header\\\">\\n                          Customer\\n                          </div>\\n\\n                        <ul class=\\\"list-group list-group-flush\\\">\\n                          <li class=\\\"list-group-item\\\" >Id: {{cust.id}}</li>\\n                          <li class=\\\"list-group-item\\\">Name: {{cust.name}}</li>\\n                        </ul>\\n                        <!-- <div class=\\\"card-body\\\"> -->\\n                          <!-- <a routerLink=\\\"/updatecustomer\\\">Update Customer</a> -->\\n                            \\n                          <!-- <a href=\\\"#\\\" class=\\\"card-link\\\">Another link</a> -->\\n                        <!-- </div> -->\\n                      </div><br><br><br>\\n                </div>\\n  \\n              </div>\\n            </div>\\n  \"","import { Component, OnInit } from '@angular/core';\nimport { Http } from '@angular/http';\nimport { customer } from '../customer'\nimport Swal from 'sweetalert2';\n\n@Component({\n  selector: 'app-get-all-customers',\n  templateUrl: './get-all-customers.component.html',\n  styleUrls: ['./get-all-customers.component.css']\n})\nexport class GetAllCustomersComponent implements OnInit {\npublic loginURL:\"http://localhost:8080/login.html\";\n   /**\n * @ngdoc method\n * @name swalwarning()\n * @param err:any\n * @description\n * This is method gets an error description, and display it on screen as an alert.\n * This method is doing use with \"sweetalert2\".\n **/\n  swalwarning(err: any) {\n    Swal({\n      type: 'error',\n      title: 'Oops...',\n      text: err + '!',\n      footer: '<a href>Why do I have this issue?</a>'\n    })\n  }\n  \n  constructor(private _http:Http ) { \n\n/**\n * @function http:Http.\n * @description\n * This function fire an \"ajax\" (\"get\"-method) over Http protocol.\n * Then by async (Observable) method named \"subscribe\" catch  the response \n * and put it into local array.\n **/\n    this._http.get(\"http://localhost:8080/admin/getallcustomers\").\n    subscribe(\n      (resp ) =>\n      {\n        this.customers = resp.json();\n        console.log(resp)\n      }, (err) => {\n        console.log(err);\n        if (err.status == 403) {\n          window.location.href = this.loginURL;\n        } else {\n        this.swalwarning(err._body)\n        }\n      }\n    )       \n  }\n\n  customers : customer[] ;\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"\"","module.exports = \"<div class=\\\"container-fluid\\\">\\n    <h1> <span class=\\\"badge badge-secondary\\\">Get customer's details by ID</span></h1>\\n    <br>\\n    <br>\\n    <br>\\n    <h4> <span class=\\\"badge badge-secondary\\\">Please fill in the blank row</span></h4>\\n    <br>\\n    <form>\\n      <div class=\\\"form-group col-md-6\\\" >\\n        <label for=\\\"inputName\\\"><h5>id:</h5></label>\\n        <input type=\\\"number\\\" class=\\\"form-control\\\" placeholder=\\\"0\\\" [(ngModel)]=\\\"customerid\\\" name=\\\"idnum\\\">\\n      </div>\\n      <div *ngIf=\\\"show\\\">\\n          <form>\\n              <fieldset *ngIf=\\\"show\\\" disabled>\\n                <div class=\\\"form-group col-md-6\\\" >\\n                  <label for=\\\"disabledTextInput\\\">name:</label>\\n                  <input type=\\\"text\\\" id=\\\"disabledTextInput\\\" class=\\\"form-control\\\" placeholder=\\\"{{_custsrv.customer.name}}\\\">\\n                </div>\\n                <div class=\\\"form-group col-md-6\\\" >\\n                    <label for=\\\"disabledTextInput\\\">password:</label>\\n                    <input type=\\\"text\\\" id=\\\"disabledTextInput\\\" class=\\\"form-control\\\" placeholder=\\\"{{_custsrv.customer.password}}\\\">\\n                  </div>\\n\\n  \\n              </fieldset>\\n            </form>\\n          </div>\\n      <br>\\n      <br>\\n      <button (click)=\\\"_custsrv.getcustomer(customerid); show=true\\\" class=\\\"btn btn-primary\\\">Get!</button>\\n    </form>\\n        <div>\\n        \\n        </div>\\n  </div>\"","import { Component, OnInit } from '@angular/core';\nimport { customer} from '../customer'\nimport { CustomerServicesService } from '../../../services/customerServices/customer-services.service'\n@Component({\n  selector: 'app-get-customer',\n  templateUrl: './get-customer.component.html',\n  styleUrls: ['./get-customer.component.css']\n})\nexport class GetCustomerComponent implements OnInit {\n\n  customer : customer = new customer(0,\"\",\"\");\n  company2 : customer = new customer(0,\"\",\"\");\n  constructor(private _custsrv : CustomerServicesService) { }\n\n\n  \n\n  ngOnInit() {}\n  \n\n}\n","module.exports = \"\"","module.exports = \"<div class=\\\"container-fluid\\\">\\n    <h1> <span class=\\\"badge badge-secondary\\\">Get customer's details by ID, and than Update it.</span></h1>\\n    <br>\\n    <br>\\n    <br>\\n    <h4> <span class=\\\"badge badge-secondary\\\">Please fill in the blank row</span></h4>\\n    <br>\\n    <form>\\n      <div class=\\\"form-group col-md-6\\\" >\\n        <label for=\\\"inputName\\\"><h5>id:</h5></label>\\n        <input type=\\\"number\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"customerid\\\" name=\\\"idnum\\\" [(ngModel)]=\\\"customerToUpdate.id\\\" id=\\\"idn\\\">\\n      </div>\\n      <div >\\n          <!-- *ngIf=\\\"show\\\" -->\\n          <form *ngIf=\\\"show\\\">\\n              <fieldset >\\n                <div class=\\\"form-group col-md-6\\\" >\\n                  <label for=\\\"disabledTextInput\\\">name:</label>\\n                  <input type=\\\"text\\\" id=\\\"disabledTextInput\\\" class=\\\"form-control\\\" value=\\\"{{_custsrv.customer.name}}\\\" name=\\\"nametxt\\\" [(ngModel)]=\\\"customerToUpdate.name\\\" disabled>\\n                </div>\\n                <div class=\\\"form-group col-md-6\\\" >\\n                    <label for=\\\"inputName\\\">password:</label>\\n                    <input type=\\\"text\\\" class=\\\"form-control\\\" value=\\\"{{_custsrv.customer.password}}\\\" name=\\\"passtxt\\\" [(ngModel)]=\\\"customerToUpdate.password\\\">\\n                  </div>\\n\\n  \\n              </fieldset>\\n            </form>\\n          </div>\\n      <br>\\n      <br>\\n      <button (click)=\\\"_custsrv.getcustomer(customerid); show=true;\\\" class=\\\"btn btn-primary\\\">Get!</button>&nbsp;&nbsp;&nbsp;&nbsp;\\n      <button *ngIf=\\\"show\\\" (click)=\\\"updatecust();\\\" class=\\\"btn btn-primary\\\">Update!</button>\\n    </form>\\n        <div>\\n        \\n        </div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { customer} from '../customer'\nimport { CustomerServicesService } from '../../../services/customerServices/customer-services.service'\n\n\n@Component({\n  selector: 'app-update-customer',\n  templateUrl: './update-customer.component.html',\n  styleUrls: ['./update-customer.component.css']\n})\nexport class UpdateCustomerComponent implements OnInit {\n\n  customer : customer = new customer(0,\"\",\"\");  \n  customerToUpdate : customer = new customer(0,\"\",\"\");  \n\n  constructor(private _custsrv : CustomerServicesService) { }\n  \n\n\n   /**\n * @ngdoc method\n * @name updatecust()\n * @param customer:customer\n * @description\n * This is method act as transfer station, it gets a customer\n *  and apply other method on the service , named \"updatecustomer\"\n **/\n  updatecust(customer2:customer){\n    this._custsrv.updatecustomer(this.customerToUpdate);\n    this.customerToUpdate.name=\"\";\n    this.customerToUpdate.password='';\n  }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"\"","module.exports = \"<nav class=\\\"navbar sticky-top navbar navbar-expand-lg navbar-dark bg-dark\\\">\\n    \\n    <button class=\\\"navbar-toggler\\\" type=\\\"button\\\" data-toggle=\\\"collapse\\\" data-target=\\\"#navbarSupportedContent\\\" aria-controls=\\\"navbarSupportedContent\\\" aria-expanded=\\\"false\\\" aria-label=\\\"Toggle navigation\\\">\\n      <span class=\\\"navbar-toggler-icon\\\"></span>\\n    </button>\\n  \\n    <div class=\\\"collapse navbar-collapse\\\" id=\\\"navbarSupportedContent\\\">\\n      <ul class=\\\"navbar-nav mr-auto\\\">\\n        <li class=\\\"nav-item \\\">\\n          <a class=\\\"nav-link\\\" routerLink=\\\"admin\\\">Admin main <span class=\\\"sr-only\\\">(current)</span></a>\\n        </li>\\n        <li class=\\\"nav-item\\\">\\n          <a class=\\\"nav-link\\\" routerLink=\\\"company\\\">company</a>\\n        </li>\\n        <li class=\\\"nav-item\\\">\\n            <a class=\\\"nav-link\\\" routerLink=\\\"customer\\\">customer</a>\\n          </li>\\n      </ul>\\n      <li style=\\\"align-items:right\\\" >\\n        <img  src=\\\"../images/tempsnip.png\\\" class=\\\"rounded float-left\\\" alt=\\\"...\\\" height=\\\"70px\\\">\\n      </li>\\n      <form class=\\\"form-inline\\\">\\n        <button (click)=\\\"logout()\\\" type=\\\"button\\\" class=\\\"btn btn-danger\\\">Log Out</button>\\n      </form>\\n    </div>\\n  </nav>\"","import { Component, OnInit } from '@angular/core';\nimport {Router} from '@angular/router'; \nimport { Http } from '@angular/http';\nimport Swal from 'sweetalert2';\n\n@Component({\n  selector: 'app-nav-bar',\n  templateUrl: './nav-bar.component.html',\n  styleUrls: ['./nav-bar.component.css']\n})\nexport class NavBarComponent implements OnInit {\n\n  constructor(private _router: Router, private _http : Http) { }\n\n\n  /**\n * @ngdoc method\n * @name logout()\n * @description\n * This method will display a boolean question to the user.\n * according to the answer this method will invoke an async (\"get\"-method) method,\n * and redirect the user to the login page or cancel the execution of \"logout\" process\n **/\n  logout(){\n    Swal({\n      title: 'Are you sure you want to logout?',\n      type: 'warning',\n      showCancelButton: true,\n      confirmButtonColor: '#3085d6',\n      cancelButtonColor: '#d33',\n      confirmButtonText: 'Yes!'\n    }).then((result) => {\n      if (result.value) {\n        this.logoutmethod();\n        \n      }\n    })\n    \n  }\n  logoutmethod(){\n    this._http.get(\"http://localhost:8080/admin/logout\")\n    .subscribe(\n      (resp )=>{\n        window.location.href = 'http://localhost:8080/login.html';\n        console.log(resp.json());\n      },(err)=>{\n        window.location.href = 'http://localhost:8080/login.html';\n        console.log(err.json());\n      }\n      )\n  }\n\n  ngOnInit() {\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Http } from '@angular/http';\nimport { company } from '../../components/companies/company';\nimport Swal from 'sweetalert2';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CompanyServicesService {\n  public company: company = new company(0, \"\", \"\", \"\");\n  public companyToUpdate: company = new company(0, \"\", \"\", \"\");\n  public loginURL: \"http://localhost:8080/login.html\";\n\n  constructor(private _http: Http) { }\n\n  /**\n   * @ngdoc method\n   * @name initcomp()\n   * @description\n   * This method initial attributes of company object\n  **/\n  initcomp() {\n    this.company.name = \"\";\n    this.company.password = \"\";\n    this.company.email = \"\";\n    this.companyToUpdate.name = \"\";\n    this.companyToUpdate.password = \"\";\n    this.companyToUpdate.email = \"\";\n\n  }\n\n  /**\n* @ngdoc Async method\n* @name createcompany()\n* @param company:company\n* @description\n* This method gets an object of company and by fire an \"ajax\" (\"post\"-method),\n* sends the object over Http protocol.\n* Then by async (Observable) method named \"subscribe\" catch  the response.\n**/\n  createcompany(company: company) {\n\n    // fire ajax POST\n    this._http.post(\"http://localhost:8080/admin/createcompany\",\n      company)\n      .subscribe(\n        (resp) => {\n          console.log(resp);\n          this.swalDone(\"Created!\", \"Company by name: \" + company.name + \" created!\")\n\n        }, (err) => {\n          console.log(err);\n          if (err.status == 403) {\n            window.location.href = this.loginURL;\n          } else {\n            this.swalwarning(err._body)\n          }\n        }\n      )\n    this.initcomp();\n  }\n\n  /**\n* @ngdoc method\n* @name swalwarning()\n* @param err: any \n* @description\n* This method gets a err: any\n*  and display a specific alert accordingly\n**/\n  swalwarning(err: any) {\n    Swal({\n      type: 'error',\n      title: 'Oops...',\n      text: err + '!',\n      footer: '<a href>Why do I have this issue?</a>'\n    })\n  }\n\n\n  /**\n   * @ngdoc Async method\n   * @name getCompany()\n   * @param id:number\n   * @description\n   * This method gets ID (number)  and by fire an \"ajax\" (\"get\"-method),\n   * sends the ID over Http protocol.\n   * Then by async (Observable) method named \"subscribe\" catch  the response \n   * and put it into local object.\n   **/\n  getCompany(id: number) {\n    if (!(id > 0)) {\n      this.swalwarning(\"Wrong ID\")\n\n    } else {\n      this._http.get(\"http://localhost:8080/admin/getcompany/\" + id)\n        .subscribe(\n          // handle with the returned result\n          (resp) => {\n            console.log(resp)\n            this.swalDone(\"\", \"\")\n            this.company = resp.json();\n          }, (err) => {\n            console.log(err);\n            if (err.status == 403) {\n              window.location.href = this.loginURL;\n            } else {\n              this.swalwarning(err._body)\n            }\n          }\n\n        )\n\n      this.initcomp()\n    }\n  }\n\n  /**\n   * @ngdoc Async method\n   * @name updatecompany()\n   * @param company:company\n   * @description\n   * This method gets an object of company object and by fire an \"ajax\" (\"put\"-method),\n   * sends the object over Http protocol.\n   * Then by async (Observable) method named \"subscribe\" catch  the response.\n   **/\n  updatecompany() {\n    // fire ajax PUT\n    this._http.put(\"http://localhost:8080/admin/updatecompany\",\n      this.companyToUpdate).\n      subscribe(\n        // handle with the returned result\n        (resp) => {\n          // what to do with the result?\n          console.log(resp)\n          this.swalDone(\"Updated\", \"Company \" + this.companyToUpdate.name + \" updateded\")\n\n        }, (err) => {\n          console.log(err);\n          if (err.status == 403) {\n            window.location.href = this.loginURL;\n          } else {\n            this.swalwarning(err._body)\n          }\n        }\n      )\n    this.initcomp();\n  }\n\n  /**\n   * @ngdoc method\n   * @name swalDel()\n   * @param id: number\n   * @description\n   * This method gets a id: number\n   *  and display a boolean question to the user.\n   * according to the answer this method will invoke a deletecompany() method.\n   **/\n  swalDel(id: number) {\n    Swal({\n      title: 'Are you sure?',\n      text: \"You won't be able to revert this!\",\n      type: 'warning',\n      showCancelButton: true,\n      confirmButtonColor: '#3085d6',\n      cancelButtonColor: '#d33',\n      confirmButtonText: 'Yes, delete it!'\n    }).then((result) => {\n      if (result.value) {\n        Swal(\n          'Deleted!',\n          'Your file has been deleted.',\n          'success'\n        )\n        this.deletecompany(id)\n      }\n    })\n  }\n\n  /**\n   * @ngdoc Async method\n   * @name deletecompany()\n   * @param id:number\n   * @description\n   * This method gets an ID (number) and by fire an \"ajax\" (\"delete\"-method),\n   * sends the ID over Http protocol.\n   * Then by async (Observable) method named \"subscribe\" catch  the response.\n   **/\n  deletecompany(id: number) {\n    // fire ajax DELETE\n    this._http.delete(\"http://localhost:8080/admin/removecompany/\" + id).\n      subscribe(\n        // handle with the returned result\n        (resp) => {\n          // what to do with the result?\n          console.log(resp)\n          this.swalDone(\"\", \"\")\n        }, (err) => {\n          console.log(err);\n          if (err.status == 403) {\n            window.location.href = this.loginURL;\n          } else {\n            this.swalwarning(err._body)\n          }\n        }\n      )\n    this.initcomp()\n  }\n\n  /**\n * @ngdoc method\n * @name swalDone()\n * @param title: string \n * @param text : string\n * @description\n * This method gets a  title: string & text : string\n *  and dispaly a specific alert accordingly\n **/\n  swalDone(title: string, text: string) {\n    if (title.length == 0) {\n      Swal({\n        title: 'done!',\n        text: '',\n        animation: false\n      })\n    } else {\n      Swal({\n        title: title,\n        text: text,\n        imageUrl: 'https://unsplash.it/400/200',\n        imageWidth: 400,\n        imageHeight: 200,\n        imageAlt: 'Custom image',\n        animation: false\n      })\n    }\n  }\n  ngOnInit() {\n\n  }\n}\n\n\n\n","import { Injectable } from '@angular/core';\nimport { Http } from '@angular/http';\nimport { customer } from '../../components/customers/customer'\nimport Swal from 'sweetalert2';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CustomerServicesService {\n  public customer: customer = new customer;\n  public customerToUpdate: customer = new customer;\n  public loginURL: \"http://localhost:8080/login.html\";\n  constructor(private _http: Http) { }\n\n  /**\n * @ngdoc method\n * @name initcust()\n * @description\n * This method initial attributes of cutsomer object\n**/\n  initcust() {\n    this.customer.name = \"\";\n    this.customer.password = \"\";\n    this.customerToUpdate.name = \"\";\n    this.customerToUpdate.password = \"\";\n  }\n\n\n  /**\n   * @ngdoc method\n   * @name swalwarning()\n   * @param err: any \n   * @description\n   * This method gets a err: any\n   *  and display a specific alert accordingly\n   **/\n  swalwarning(err: any) {\n    Swal({\n      type: 'error',\n      title: 'Oops...',\n      text: err + '!',\n      footer: '<a href>Why do I have this issue?</a>'\n    })\n  }\n\n\n  /**\n   * @ngdoc Async method\n   * @name createcustomer()\n   * @param company:company\n   * @description\n   * This method gets an object of customer and by fire an \"ajax\" (\"post\"-method),\n   * sends the object over Http protocol.\n   * Then by async (Observable) method named \"subscribe\" catch  the response.\n  **/\n  createcustomer(customer: customer) {\n    this._http.post(\"http://localhost:8080/admin/createcustomer\",\n      customer).\n      subscribe(\n        // handle with the returned result\n        (resp) => {\n          // what to do with the result?\n          console.log(resp)\n          this.swalDone(\"Created!\", \"Company by name: \" + customer.name + \" created!\")\n\n        }, (err) => {\n          console.log(err);\n          if (err.status == 403) {\n            window.location.href = this.loginURL;\n          } else {\n          this.swalwarning(err._body)\n          }\n        }\n      )\n    this.initcust();\n  }\n\n  /**\n * @ngdoc Async method\n * @name getcustomer()\n * @param id:number\n * @description\n * This method gets ID (number)  and by fire an \"ajax\" (\"get\"-method),\n * sends the ID over Http protocol.\n * Then by async (Observable) method named \"subscribe\" catch  the response \n * and put it into local object.\n **/\n  getcustomer(id: number) {\n    if (!(id > 0)) {\n      this.swalwarning(\"Wrong ID\")\n\n    } else {\n      this._http.get(\"http://localhost:8080/admin/getcustomer/\" + id).\n        subscribe(\n          // handle with the returned result\n          (resp) => {\n            this.customer = resp.json();\n\n            // what to do with the result?\n            console.log(resp);\n            this.swalDone(\"\", \"\")\n            // fire ajax GET\n          }, (err) => {\n            console.log(err);\n            if (err.status == 403) {\n              window.location.href = this.loginURL;\n            } else {\n            this.swalwarning(err._body);\n            }\n          }\n        )\n    }\n  }\n\n\n  /**\n * @ngdoc Async method\n * @name updatecustomer()\n * @param customer:cutomer\n * @description\n * This method gets an object of cutomer object and by fire an \"ajax\" (\"put\"-method),\n * sends the object over Http protocol.\n * Then by async (Observable) method named \"subscribe\" catch  the response.\n **/\n  updatecustomer(customer2: customer) {\n    // fire ajax PUT\n    this._http.put(\"http://localhost:8080/admin/updatecustomer\",\n      customer2).\n      subscribe(\n        // handle with the returned result\n        (resp) => {\n          // what to do with the result?\n          console.log(resp)\n          this.swalDone(\"Updated\", \"customer \" + this.customerToUpdate.name + \" updateded\")\n\n        }, (err) => {\n          console.log(err);\n          if (err.status == 403) {\n            window.location.href = this.loginURL;\n          } else {\n          this.swalwarning(err._body);\n          }\n        }\n      )\n    this.initcust();\n  }\n\n\n  /**\n * @ngdoc Async method\n * @name deletecustomer()\n * @param id:number\n * @description\n * This method gets an ID (number) and by fire an \"ajax\" (\"delete\"-method),\n * sends the ID over Http protocol.\n * Then by async (Observable) method named \"subscribe\" catch  the response.\n **/\n  deletecustomer(id: number) {\n\n    this._http.delete(\"http://localhost:8080/admin/removecustomer/\" + id).\n      subscribe(\n        // handle with the returned result\n        (resp) => {\n          // what to do with the result?\n          console.log(resp)\n          this.swalDone(\"\", \"\")\n        }, (err) => {\n          console.log(err);\n          if (err.status == 403) {\n            window.location.href = this.loginURL;\n          } else {\n          this.swalwarning(err._body);\n          }\n        }\n      )\n    this.initcust();\n  }\n\n  /**\n * @ngdoc method\n * @name swalDel()\n * @param id: number\n * @description\n * This method gets a id: number\n *  and display a boolean question to the user.\n * according to the answer this method will invoke a deletecustomer() method.\n **/\n  swalDel(id: number) {\n    Swal({\n      title: 'Are you sure?',\n      text: \"You won't be able to revert this!\",\n      type: 'warning',\n      showCancelButton: true,\n      confirmButtonColor: '#3085d6',\n      cancelButtonColor: '#d33',\n      confirmButtonText: 'Yes, delete it!'\n    }).then((result) => {\n      if (result.value) {\n        Swal(\n          'Deleted!',\n        )\n        this.deletecustomer(id)\n      }\n    })\n  }\n\n  /**\n* @ngdoc method\n* @name swalDone()\n* @param title: string \n* @param text : string\n* @description\n* This method gets a  title: string & text : string\n*  and dispaly a specific alert accordingly\n**/\n  swalDone(title: string, text: string) {\n    if (title.length == 0) {\n      Swal({\n        title: 'done!',\n        text: '',\n        // imageUrl: 'https://unsplash.it/400/200',\n        // imageWidth: 400,\n        // imageHeight: 200,\n        // imageAlt: 'Custom image',\n        animation: false\n      })\n    } else {\n      Swal({\n        title: title,\n        text: text,\n        imageUrl: 'https://unsplash.it/400/200',\n        imageWidth: 400,\n        imageHeight: 200,\n        imageAlt: 'Custom image',\n        animation: false\n      })\n    }\n  }\n  ngOnInit() {\n\n  }\n}\n\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n\n"],"sourceRoot":""}